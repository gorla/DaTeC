package ch.unisi.inf.datec;import java.io.IOException;import soot.Pack;import soot.PackManager;import soot.Transform;import ch.unisi.inf.datec.instrument.CallChainInstrumenter;import ch.unisi.inf.datec.instrument.DefInstrumenter;import ch.unisi.inf.datec.instrument.UseInstrumenter;import ch.unisi.inf.datec.instrument.HashcodeInstrumenter;public class Instrument {		private static String propertiesFile = "datec.properties";	public static void main(String[] args) {		soot.options.Options.v().parse(new String[]{"--keep-line-number"});				/* check if properties file is specified in a different location */		for(int i=0;i<args.length;i++){			String argument = args[i];			if(argument.equals("-pf") | argument.equals("--properties"))				propertiesFile = args[i+1]; 		}				/* parse the properties file */		try{			DatecProperties.getInstance().parsePropertiesFile(propertiesFile);		}catch(IOException ioe){			System.err.println("Errors in parsing the properties file. Default settings will be used");		}				/* add soot phases */		Pack jtp = PackManager.v().getPack("jtp");		jtp.add(new Transform("jtp.hashcodeinstrumenter",				new HashcodeInstrumenter()));				jtp.add(new Transform("jtp.definstrumenter", new DefInstrumenter()));		jtp.add(new Transform("jtp.useinstrumenter", new UseInstrumenter()));		jtp.add(new Transform("jtp.callinstrumenter",new CallChainInstrumenter()));		String dirInstr = DatecProperties.getInstance()				.getDirectoryInstrumenter();		String[] sootArgs = new String[] { "-process-dir", dirInstr,				"-output-jar", "-output-dir", "instrument.jar" };		soot.Main.main(sootArgs);	}}